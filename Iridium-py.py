from scapy.all import *
import json
import base64
from MT19937_64 import MT19937_64
import parse_proto as pp
import keyboard


# 死妈pycharm，字节串过长自动换行在最后加个空格
# python -m grpc_tools.protoc -I D:\explorerdownload\bin --python_out=. --grpc_python_out=. GetPlayerTokenRsp.proto


def get_packet_id(b_data):
    packet_id = int.from_bytes(b_data[2:4], byteorder="big", signed=False)
    return packet_id


def remove_magic(b_data):  # GetPlayerTokenRsp 只用
    cut = b_data[5]
    b_data = b_data[8 + 2:]
    b_data = b_data[:len(b_data) - 2]
    b_data = b_data[cut:]
    return b_data


def remove_magic1(b_data):
    try:
        cut = b_data[6]
        b_data = remove_magic(b_data)
        return b_data[cut:]
    except IndexError:
        pass  # 特殊包


def parse_proto(pck_id, b_data):
    # try:
    #     a, b = blackboxprotobuf.protobuf_to_json(b_data)
    #     print(pck_id, a)
    # except Exception:
    #     pass
    if pck_id == 131:
        data = pp.parse(b_data, get_proto_name_by_id(pck_id))
        i_seed = data['secret_key_seed']
        return i_seed
    else:
        proto_name = get_proto_name_by_id(pck_id)
        if proto_name:
            data = pp.parse(b_data, proto_name)
            if data:
                return data
        else:
            print("获取不到proto名称编号：" + str(pck_id))
        # proto_name = get_proto_name_by_id(pck_id)
        # if proto_name:
        #     proto_py = proto_name + "_pb2"
        #     msg = "出错了"
        #     while True:
        #         try:
        #             exec("from proto import " + proto_py)
        #             exec("msg=" + proto_py + "." + proto_name + "()")
        #             break
        #         except ModuleNotFoundError as e:
        #             need_import = re.sub("'", "", str(e).split(" ")[3])
        #             print(need_import)
        #             if need_import == "NONE_pb2":
        #                 break
        #             exec("from proto import " + need_import)
        #     try:
        #         exec("msg.ParseFromString(b_data)")
        #         print(str(msg))
        #     except AttributeError as e:
        #         print(msg)


def sniff_package(*args):
    piface = "NPF_{46BA0BF2-6168-45EA-9476-F42ECD5D0EE5}"
    if type(args[0]) == int:
        pkg = sniff(iface=piface, count=args[0], filter="udp port 22102||22101")
        for package in pkg:
            b_data = package[Raw].load
            if get_init_key(b_data, d_keys):
                key = get_init_key(b_data, d_keys)
                b_data = b_data[28:]
                decrypt_data = xor(b_data, key)
                packet_id = get_packet_id(decrypt_data)
                if packet_id == 131:
                    b_data = remove_magic(decrypt_data)
                    i_seed = parse_proto(131, b_data)
                    return i_seed
        print("没抓到诶，是在进门前就运行了吗?")
    else:
        while True:
            if keyboard.is_pressed("q"):
                input("暂停中，输入任意键继续")
            pkg = sniff(iface=piface, count=1, filter="udp port 22102||22101")
            # port = pkg[0].sprintf("%UDP.sport%")
            # if port == "22102" or port == "22101":
            #     print("server", end=" ")
            # else:
            #     print("client", end=" ")

            b_data = pkg[0][Raw].load
            b_data = b_data[28:]
            key = args[0]
            decrypt_data = xor(b_data, key)
            packet_id = get_packet_id(decrypt_data)
            b_data = remove_magic1(decrypt_data)
            if packet_id == 0 or packet_id == 98:
                continue
            # elif packet_id == 24:
            #     print(b_data)
            # else:
            #     pass
            # print(packet_id, end=" ")

            proto_name = get_proto_name_by_id(packet_id)
            if proto_name:
                try:
                    data = parse_proto(packet_id, b_data)
                    print(proto_name, data)
                except Exception:
                    pass
            # print(packet_id)

                # print(proto_name)
            # else:
            #     print()

            # # elif packet_id == 4872:
            # #     parse_proto(packet_id, b_data)
            # else:
            #     pass
            # if str(packet_id) in d_pkt_id.keys():
            #     # print(packet_id, d_pkt_id[str(packet_id)])
            #     pass
            # else:
            #     print(b_data)


def read_keys():
    f = open("Keys.json", "r")
    d_initialKeys = json.load(f)
    return d_initialKeys


def read_packet_id():
    f = open("packetIds.json", "r")
    d_packet_id = json.load(f)
    return d_packet_id


def get_init_key(b_data, keys):
    key_id = int.from_bytes(b_data[28:30], byteorder="big", signed=False)
    possible_key_id = str(key_id ^ 0x4567)
    if possible_key_id in keys.keys():
        key = base64.b64decode(keys[possible_key_id])
        return key
    else:
        return False


def xor(b_data, b_key):
    decrypt_data = b""
    for j in range(len(b_data)):
        decrypt_data += (b_data[j] ^ b_key[j % len(b_key)]).to_bytes(1, byteorder="big", signed=False)
    return decrypt_data


def generate_key(seed):
    first = MT19937_64()
    first.seed(seed)
    gen = MT19937_64()
    gen.seed(first.int64())
    gen.int64()
    key = b""
    for i in range(0, 4096, 8):
        num = gen.int64()
        key += num.to_bytes(8, byteorder="big", signed=False)
    return key


def get_proto_name_by_id(i_id):
    try:
        proto_name = d_pkt_id[str(i_id)]
        return proto_name
    except KeyError:
        return False


d_keys = read_keys()
d_pkt_id = read_packet_id()

seed = sniff_package(6)
new_key = generate_key(seed)
# input()
sniff_package(new_key)

# piface = "NPF_{46BA0BF2-6168-45EA-9476-F42ECD5D0EE5}"
# f = open("sniff_package.txt", "w")
# while True:
#     if keyboard.is_pressed("q"):
#         break
#     pkg = sniff(iface=piface, count=1, filter="udp port 22102||22101")
#     b_data = pkg[0][Raw].load
#     f.write(str(b_data) + "\n")
# f.close()

# piface = "NPF_{46BA0BF2-6168-45EA-9476-F42ECD5D0EE5}"
# while True:
#     if keyboard.is_pressed("q"):
#         break
#     pkg = sniff(iface=piface, count=1, filter="udp port 22102||22101")
#     wrpcap('filtered.pcap', pkg, append=True)

# d_keys = read_keys()
# d_pkt_id = read_packet_id()
# start = 0
# key = b""
# pkgs = rdpcap('filtered.pcap')
# for i, pkg in enumerate(pkgs):
#     b_data = pkg[Raw].load
#     if get_init_key(b_data, d_keys):
#         key = get_init_key(b_data, d_keys)
#         b_data = b_data[28:]
#         decrypt_data = xor(b_data, key)
#         packet_id = get_packet_id(decrypt_data)
#         if packet_id == 131:
#             b_data = remove_magic(decrypt_data)
#             i_seed = parse_proto(131, b_data)
#             key = generate_key(i_seed)
#             start = i
#             break
# ff = open("xor_data.txt", "w")
# for i in range(start + 1, len(pkgs)):
#     data = pkgs[i][Raw].load
#     data = data[28:]
#     b_data = xor(data, key)
#     ff.write(str(b_data) + "\n")
# ff.close()

# d_keys = read_keys()
# d_pkt_id = read_packet_id()
# f = open("sniff_package.txt", "r")
# b_datas = f.readlines()
# f.close()
# start = 0
# key = b""
#
#
# for i, b_data in enumerate(b_datas):
#     b_data = eval(b_data)
#     if get_init_key(b_data, d_keys):
#         key = get_init_key(b_data, d_keys)
#         b_data = b_data[28:]
#         decrypt_data = xor(b_data, key)
#         packet_id = get_packet_id(decrypt_data)
#         if packet_id == 131:
#             b_data = remove_magic(decrypt_data)
#             i_seed = parse_proto(131, b_data)
#             key = generate_key(i_seed)
#             start = i
#             break
# ff = open("xor_data.txt", "w")
# for i in range(start + 1, len(b_datas)):
#     data = eval(b_datas[i])
#     data = data[28:]
#     b_data = xor(data, key)
#     ff.write(str(b_data) + "\n")
# ff.close()

# d_pkt_id = read_packet_id()
# ff = open("xor_data.txt", "r")
# decrypt_datas = ff.readlines()
# ff.close()
# for decrypt_data in decrypt_datas:
#     decrypt_data = eval(decrypt_data)
#     packet_id = get_packet_id(decrypt_data)
#     b_data = remove_magic1(decrypt_data)
#     if packet_id == 0:  # or packet_id == 98:
#         continue
#     print(packet_id, end=" ")
#     proto_name = get_proto_name_by_id(packet_id)
#     if proto_name:
#         print(proto_name)
#     else:
#         print()

# d_pkt_id = read_packet_id()
# key = b'U\x0e\xfaT~\xf3\x03T\x06\x11\xb0\xd9\xe3\xbd\xdc\x0ef\nS\xef\xfa\xdfr\x07\nN\xe8\xe3\x8a \xc1\xa9\xeb\xdf\xbb\xe2p\xd7\xe8\xb7\xe8\xae:\x1c\xc3\xf3\x05\x7f\x15\xff#:\xd85r&\'G\xb8\x8ff\xf5\x91\xc0\x81=\x8f\xf0\xa5\xdb\xc6\xe0\xad\xfa\xbc\x9f\xed\xd3\xe2i=\x15>\x1c\xe8\xf2D\x1e!L*l]h\xc2\xcd=*\xa0\xd0\xd5\x9a\x83\xe0\xd0AO\xe4[F\xcd"\xfa\xfb\x97\xe6\xf7a\xf3\x94\xbe\xb8i\xa2\xdc\x99\xb6(\xa9^\xaf\xda\x9bC]\xd2<\x0cJ\x0fE\xa5\xf8\x01\xe7\t\x90!\xfc\xc9\xec\xcf\'\x91\x19\xde\xfd\xfbu\xb3\xaa\x84\xcd-\xc4\xb5\xcb\xb8F\x1e\xb4G\x03\xdb[{\xa6\xf5?"\xe5\x12\xad`\x19\xa2}Z~f\x80\xa2\xf7\xcb\x05\x13\xa1K|3j\xb7\xe0\xbei\xca&\x94\xe6<Vx<\x00\t\xb6;\x12c\xc8\xe1wS`\x84(E\xe6\xdb|\x1e\x9b\xdd\xe8\x99\x0e\xb7\xf9\xdaq\n\xf3)\x81\xb0X\xb5\xf5L\x0b\xa39T\\\x0eC\xe8\x84\xceF\xa7\xef\xc0$c\x17I\xbe\xc9\xb2\xf9\xca\x9e\x93F\t\xc4\xea\xf4"g\xf0\x06\xae\xaa\xce\x0e\x03}\xe1\x1ca\xce\x8e\xdb5\xba6\x05=\x92\rJk\x8ak\x1d\x1e\xe1\xe9i\x0e\xf9Y(\x06u\xac\xd3\x97z\xc0\xa1h\x01\xd8\xa6\n$\xf3m\xfa\xb5\xd6~\xa2\x893r\xde\xff\xc7\x98\x90\xf3c|X\xeb\n\xf9&\xab_\x88\xf0\xc0k\x1f\xab\x88z\x9d\xa6\xae\xfa\x13\x1cXK\xe6\x1c`T\xcf\xb3\x04\xf0\xe5c\xaf&,*\x13xF\xf2\x1f\xc8\xb1)\xc6\x00\xffLir\xf1\xc9#]\x1b\x8f+B\x99;\x1c\xe0%\xdb\x0bv\xdf\x0f]56\xb9\x8eM\xf3\x88RX\x19\x199\xa0\xb4\t\x0f\x8a\xc7\x82#\xbc\x88\xbd\x99\xcd\xce/\xc1X\xe6\x0e-31R\xd5\x1a7\x0cZ\xa9\x06\xedZT\xd1\xb5\x1e\xa1t\xad\x89AE\xab\x05\xef\xbe\xba\xddA\xa5\x821\xe3[\x98\xd0\xab\xddl\x14*A\xdd,\xcc\x0e\xd9\xfe\xf8s\xf5(^uW c_\xe8\x8f4\xa9\x96\xa7dI\xbf3\xab\x95\xd7\xe1)ou/\x99\xads\x90\xc7\xed\xabWm\x16\xcb\xa5\x92p\xbf\xa0e\xefs\xfc\x99F\xad\xc7\xe4\xean\xb2\xc4|JA\x8a}\x17\x91\x84C\x8c[y\x91x\x1d$yQ\xce\xd7 _\xd8^\x9bE\x04w\xc5,\x9a\xc0\n%M\r\x14T\xc8\x07\x0c\xe5\xd8\xdb\xc1\xe3\x15\x93\x83l\x10U\xae|Y#\x97\x1f\xa8\xb7]`z\xb0\x08\xc55\xda=\x98zC\x8d%H\x88\xf4V\xe0\xe0`\xb2]\'\x14e\x1c\x7f\xad\xa8\xb8\x03\xf7\x9f\xa3\x14\xbe\x83-\xe0\xea(\xa2\xc6\xcd\x97\x11R\xf9\xc3\xff\xb4,G"\xac\x91\x1b{\xb7&\xad1\x00\x8fQ2\xe017\xa2\xca\x86\xd8\xf6z\xd7\xa6\xc3m$\xf47\xcbY\xaa\xcfN3\xe5\xe3\xa5\x85\xdc\xb9\\\x83\xbb\xd1S\x85\xe0\xbd\'\x0c{g\x90\xdf`j\x14\x8b\xf9C\xe3J\xa4\x95\x89\xedZ\x1b\xf6\x05\x97\x11\x02lr\xd3m}\xb7\x88/{\x17j\n\x87\xa3\xdc\n\xef\x9bn\x95\x90\x91\xfb\x8d\xc8\xe8g\\f0Z M\x00\x19C3\x89{\x9b\xbf7l`\x06O\x934\xd6\xa2\x04\x1cd\x86\x9d\xeb\xef\xf1\xe2\xa8fU\'QV\x0f\x8f.Y\xbd\xb3v\xba\x1b\xd6\x05Ogs\xc8\xe5\x95\x9c\x7faTJ\x86W\x94\xb0\x99\x8d}D\x934\xe51*i\xea&0\xf1\xcb\x93\xcb@\x9a0\xdc\x19A\x12\x8f\x06o(\xe9!\xc0\xef\xe8\xac?\x1f\xfe\x1a%M\xec\x00K\xc2\xdb(\xb07\x10\xc5\x04\'*\xf8\x82\xe0\xbf\xdc5\x8a1\x00\x01\x1a\x02#\x88^Z\xef\xd9u\x13\xb2\xf4\xca\n\xe0\xf5\xa2![\xa8+\xec\xe9\ng\t\x89;\xd5\xf3\xb8\xf7\xf1\x0c3\xc7\x03\xe0\x1dH\x97\xa1\x00\xa1\x83\x8c(p*\x86\x9f\xe45\x8f\xad\xd4\xe0`\x7f\xb6\x1bA\xe1\xe8\x86\xd6\x1a\xd7\x13\x91I\xb4\x17K\xf7?\xa7\x9eW\xe7)Uo\x89\x00U\x10\xc7.\xb7\xb0\xa5L\x9c\xdc\xb1\xccq\x84\xa7\xb2t\xde\xb3\xf2\xd3+\x89\xd9\'\x9dd\xfc\x1b\x9bW\xc0\x90\xb4\x06\'~d\x93z\x89@\xd7<a\t\xceDD\xb5\xcb\xc4\xf8\x7fWM\x1b21W\x92\x180\xa9\xad\xf1\x11\xa3\xe9\'\xb9@\xfc\xcf\xd1\xe7u#l\xe5\xbcS\xbc\xedq\x1f\xbe\xe1;\x14k\xaf\xa3\x8b$>mUF\x92\xc5\x11%L^\xee\x91\x7f2\x89\xe1\x83\xa8F\x9f~vq\xedh\xab\x19\xc4\xa5_\xe3:p\x8d\x11v\xc2\xbd\x00\x85r\xa8\xf1\xa5G\xf5\x10\xbc!:\x1b\xe1<7\xef\x81\xa6\xcf:\x19\xb4\xeb+\x85x\x95\xc3\xfe3\x04EF\xb0\x98\x7f\xcf\x93\xe4*\xd5z\xc3\xb3\xd4\xc0)\xf7D\xf3\xc7C\xda\xd5{hY\xbd\xa8\xbfR\xd5\xb0Rq%\xc1\x18\x1c\xbf\xee\x03\xfe/H;\xa2\x86O\xebk\xce\xf2\xb2\xf0e\x15\xd3`\xaf>\xa7\x85\x9d\x83J\x1a\xa5\x1cG\xb2\x94\xdb4k\xc6\x90\x89k\n*\x01\xbc\xd9\x88\x97d0\xbf\x1d\xa5\x01\xb7)\xf9&\x08}>\xf1V\x06\x9b\x18y7\x9cW\x85\xe4\x93\x10\xeb\xdd\xcaH\tE\xa7\xe4\xbb\xa1\xfb\x7f9\xd6\x8c\xdc\x99\xec\x8cG\xee\xa5\xa4\xf3\xb11K\x85Q*\xa1\xadD7\x032\xa6\xcfp\xea\x86\x0fW\xd1\x9e\xb3\xf4\xd0\xfez\xcd2\xd8Ye]&\xda7\x8c\xa5A\xe0\xba\\}\xcc\'\x01\x1aT\xf1P\x05\x11T\x8e\xfe)\x0c\xf0\x8e\x13\xd7\xdd\xa0D \xa8{ 6a\xf2\x0b8\xcc\xe2\x19\xa3\x13[\t_.\xc9\xa8T\x05q\xe1\xfb\x1d\xcb\x858\xdb\xdb5\xa0\xa8\x8bY\x13\x08\xc0%T\x18-\xb4\xd8\xd9\x80`\x07Hn\xd7\\\xb2\xa9\xfa\xff\xad\xa3\x94\xbe\x89\x88\xf7"1\xdf\x1a\x91\x9f\xe2wh\xd8^\xb1\x14\xc5\x07\x8d\x80\x07K\xf9b\x08\xb0`\xc1\xb2aX\x8e\x9e/\xd5\xdc\xd5\x15\xf0|\xd0\xc3\xdf\xe5\xc8R\xcf\xbf\xcbg\xdbW\xa4\xaa\x8b\xc6sEk\x84a\x10\x1f\xf2\x9a\xb2\\\xe6I%\x9fR?\xba\x0b\xdf6\x82t\xbf\xf9\'\xd2\xf9l-\x8c\xccEU\xfe\xf7*\xdd\x07F\x8c\xad\xfc\x85\x93)w\x87\x0e\xaa\xc5\xfbL)\x85\xf2P\xf4\n\xa1z\xa75\r\xbec\x0f\'\x97\'\xff\xae[\x05\xfe?t\xc0AP\xe16eD+\\\xcf\xff\xafk\x13\xc86\xad\x94Sq\r\xc0\xf9f\x9d[ad\x87\x93\xca\xdc\xbe\xc5=hm\x1aP\x89\xda\xdf/\xaf\x9aa\x11+\xf7\xcc\xfe\xa1M\xf7\xe4\xa5\xda\tE\x8e\xach\xd4\x94\x18\xcc\xa35\x85\xdc:1D\xe84\xcaQx\x8a\t\x1c\xac\'\x90"L\x9d\xdeF\x86va\xd6\xe5\x9b\xfc%\x86\xfe+{\x8b\xac/M\xed\xae\x98\xb1\xe0\t\xdb~\xfa\x11\x12\x17l\x10\x04lo#\xc9\x0b\xa1\xf8Ynj.\xd1\xbf\x9d\r\x82\x96\x13\x9c\x82\xbb\xb5s\xa4\xc3\xa8(\xaa\xd6\xf3\xe3\xd1\x14\x8c\xa1\x99\xe1\xc3\xedP\xa7\x85\xf9\xbf\x88Llwx\xf6o\xfc\x92\xb6\x14\xa9+x6\x17\x8c\x0f[\xdc\xc8\x83\xfa\xa83\xd7\xb9\xf5&\x8a]ww\xdf\xc7\x9cF\x11\xb77l\x97\xe1\x85x\x08\x81+\rWK\x99\xc3\xe7\xff\x95A\x0c\xc7\xa5RGJmW$\xd2E\xdc[O\xd5\xd4\xc2R\x06e\xe8~X\x95\xe6\xa51rR\x04z\x8a\x8a\xd3\x11\xfd\t\xca\xfbn2\xb3|\x1a\xcc\xe5\x19\xe1\xfb@\x86\xdc]\xd5\xe2\x85\xf0S\xee\xcc3\x0c\x9e\xfa\xa2\xb1\xe6g\xf0g\xc5\x0fa\x85\x966,\xa3\x1dx\xee\xbb$\xe2\x1e=\x01\xb3\xd4\xe1\xd7\x98\r5/!\x88q\xeem\xc7\x03B-\xfe\x94\xa7\xd6\x91\xaf3\x97\x08,r\x83\xb0\x99\xcb\xe3\x1b\x0f\xf5\x12i3\x92<G\xd1\xf5\xc1\xc8\xb5\xdf\xd7\xac\x18U}\xc1\'\x9f\xae$B}m\xa1\xfd\x1e\x82\'\xf6+\xc1\xeb\xd5v0\xa3E,?\xc2\x97X\xf99\x86\x9e*\xf0\xe2\xb6\xa8\x05\x1a\xb9]S\xf3\x16wW\xd1\xb9\x06v\xf8N\xab\x8e\xcf\x9e\xb6\xcal\xcc\xf0\x10M\xb1\x19\x0f\xa5\xea\xfa\x9a)=\x96;\x91\xfd0\xb3,\x0e|I\xd3\xa5\xd5\x07:,\xd6\xfcQ\x9d1\xa7]\x85N/\xb5XF\xd7\\ \x1cr\xa4N\x97M \xb4k\r\xb6\xbb\x7f\xd9\xbd\x80}\xe4\x99,!\xb3\xd2\tB\x9e\x0eZ=\x9eQ\x84\xd4~\xb1\x88\x03\xa7\x88\xccB.\xc0\x0e\xd1l\xb2\xd7\x7f\x9d\\\xac\xcd\xc5]\x19\x9c\xf6\xda\xea!\xd8\x14`\xb7\xcf\xfbB\x07a\xca\x12\xebZ\x08\xa4Zve\x1b\x16\xa3\xa7*~\x8bX\x90\xd1\xcb\xe0lT\xd4\x19\xc8\x95\xee.\x98V>\xd4\xab\xc8\x8a\x8bm\xdc\xbc!q\xc2\xed.A\xa07=\xcfC]\x88\x89\x04\xab\x9d\xe1\xbd\x85[\x92\xc8\x15\x9fQl\xbfo\x10\xefEg6u\xe1\x19i\x89\xdecH\x18\xcbz?\xb2\xef\x0cI\n\xa35\x96\xc8S\x0b\xdf\x0f{h\x04\x18\x19EB\x02\xf7\x16c\x04\xbf\xd9\x93\x82o\xba\xed\xd0p\xf5M\x0e\rRY\x16y\xe6$TK\xb3UPNOS\x02sQJ\x8fs"\xc0\x18\x08\xb9@\x8dT\x82\xe1\nY\xf7\xd5\x8a\xcc\x869\xce\x8a\x0eKQl\xe4\xde\xb8\x13\xad\xcc\xad\xdb\xc2\xea\x95/\x13{\xd6-\x05\x8ck8R\xecOv\x81?\x0f\x19vh\x90\xa8\xbaf\xdfl.\xd6/\xc3\xc5\xd5\xe9(a\xd0\x07\x18U,?\xd4\xdbTY\x1b\xaf\x88M\x97\xf4\x85\x04\xcb\xc2\x81\xfb\xaa\xa5\x19\xa1\xd7;\xb0\x05\xd5\x83\xabN\x85\xed8h"\xc7a\x01\x0c(\xe7\xc3-\xec\x05L\x9aB\xba\x10\xc1\xd7@"\xde\x8e\x8b\xa8M\xe0\xf9\x8a\xc4\xe2\xd3\x9d\x84\xa4o\x03\x08X\xe1\r\x1e)\x11@\xa4\x9f\\\xad\xf3\xd6\xbf\xe3\xc9AG\x98f\x90\x94\xb9\xd7\x9f\xcdAe\xe8\xe57\x88\x8d\x01\x14\xa8\xb6\xbfs\xc1\xfb|p_\xd9\xc4F\t\r\xba\xb7\x84\xaa\x06\xa7\x8c\xb4At\x98i\xa9\r\xa8gx\x1c\xfb\xbd\x90\x98\x84}G\x1a\xec\x8aW`u/\x9d\x14\xc2l\xa8\x95\xdb\xb5\xfa\xea\xfe\xe4-[\x8aP,\xba\x91\x10\xa2rl\x03\x9e\xe7\xef\x81\x86\x92\x88\xfd\x06\x02\xd4{\x8c\xb9\xf8%"\xd8\xe8n\x1c\x7f\x19\xbc\xe6}\x7f\xe7Y\xa9s_N\x17\xa5\xd5\xd4:\xf4\x95\x14k\x19\xa0\x95e\xe8\xa4\xaa\xf1Ye\xc9\x8d\x0b\xf1\x92\xf5)\xfd\xb3\xa0\xea\xb0&T&\xd1\xea\xfe\xea\'\xb4"\x94\xc6\xfd\x93\xa6\x02]\xc3\x8a1\xe5W\xfd\xfa\x8a\xb2\x92\x88c\nHE\x06m\xef\xce\xce}@\xbb~Gk\x07T\x03\x07\xa8\x05\xed,\x9e\xc9g\xf7\xe9\x9c\xb4\x8d\x08\xd0\xd2r\x11\xb4\xac*\xe0\xf0\x8e>\xf07*\xa3r\xc7\xd5\xe5\x12\xeb\xa2\xde\x8b\x1a!\x0f-\x1c\x94\xdb\xdc\xccrt\x07\xf9\xf6\x85j\x0c\xd3\t\xe9\xc2\xe2\x9d\x07\t\xb8y\xf4\xd1\ny\x9f\xeb)4\x90\xcd\xdaY\xaf\xdf\xc8Z\x1aQ\xc6\xe1\xfa\xe1\xa3\'\x17\xf9F\xf9\xaa\xe6\xcc\xe9m\x7f\xaa\xb0\x90J\xf52\xf3\xcd@\x05\xce\x1eP\xdbrx\xde0 \x85V\x94!\x93)\x05%\xd5\x10P\xb4\xd05\x91\xb2\xe2q\xc8m\x85\x03\x83\x1f\x95\xff\x1dl1I((\xbf\xc1VgS\xc5L\xcd\x8f\x13\x83\xd1h-gB"^\xb0q\xddJ\x1d\x9c\x94\x06\xa0\xfd\xcfD?\xc6\x90sf\xeav\x11\xc9!\x89:\xf2\xc2ab1i\xc1i\x82\x96\xc2\xc2,\xf31st\x96}0U\x02n\x95%\xf5\xd0A\xf9\xe1\xda\x1bhV\xdb\x0b\xae\x07H!\x9a\x95\x8e\x83\x8d,\x17\x19\x0cC\xc8m^\x08q\\\x7f\xa0JUJz\x04\xeb\x91_w\x8e\xe32x\xcc\'\xf3\x7f\xe2 \x92Qi\xfeB\x98\x8czX!\xe5\xf7T\xa7v\xb7\x96\xaf\xa4\xa6a\x08$6\x0b\x93\xcc\xeb\xa0\xfa\x12\xbad\x06\xc9t\x14m!\x95\x9b\xe6\x84Q\xdc_\x19\xb2\xe4\xb8\xd6\xf8\x96:P\xc2Y\xf4>R\xc3\xce\xd3UQ\xe0~)\x17\x1f,\x06Q\xa0q\x93Tt\xc3qJ\xf6\x98\x03?I\x1dP9l1\xc6\x12\xa9\x18|\xd9\xe2\x87\t\x06\x85|\xf7\x89\xea\xa3\x88\x1fl\xd2T\xb4.\xbbs\xf5*~\x11\xd1\xdc\ni\x9b\x04(\xb7\xe3e\xbc\x18<\xc3m\x8a\xb3\x9eTK\xc3\x81\n\x087!\xfa\x1f\xac\x14\xe2\x8f\xb5\xb9\x04\xd1s\x9e\xeeb\x0f\n\xace[\xf9\xa2[\x10\xfa\xee\xb5\x0c\xcb\xc1\xba\t5\xe5nEI!\xb1\x08x\xc4\xd9\xe8$tiy\x98Om\xf1z\xa7y+\xe3\x19Y\xe5<\xaa\x8eG\xed\xcdlW\x15\x82\xe0,\xef\xd7\x04\xcd\xba\xe2D\xd6\x04B2\x9ce~Zr\xd6\xeav!\xcb\x07\x8cF\x86\xb68fvX\xa6\x07\xd4\x02$\x9d\xda\xb6"\x0c\xb5Y\x08D \xe3\xf7\xa3\xd1\x18\xdc\xe5\xb5"^\xf7\xfdMXM\xaa\x1d\xf8^\x0f\x1e\x155\xf2\xe0riR\x17\x08\x0e\x19\'\xaf[K\xadbd\x17\x0e\xff\x9e\x0cS\xff\x17A\x9d\x9a\xc8\xf1\xc98>\\\x9e\xa0^\xaeO0\t\r\xfdptY\x91\xb7\xab\x02\xb2;\xc0{\x10p\xc13\xfa\xd0\xdf\xf9\x15\xdcB\xb6\xf9{\xc8\xda\xc5\x9c}\xf1\xd1\xb1\x90.\xb0&\'+\x8d\x15wa\x00O\xd6~+K\xf4\x8a\n3\nZj\xa2\xa6xaQ\xf6-_\xb2`o\xf5\x04\xbe(\xebh\xcc*K\xf9\xfd(i\xfb\x08\xb9(X\xba\xc0\x12Z\xe0\x01P\xf4\xd0H)\x1eu\xa9\x11\x8d\xea*\xcaw\xb3\x11 \xd3C\xb3\xe81\x1e[\xa9\x16=P\xb9g=P\xe1\xbf\xecb\xbb\xfd\xd4\x7f\x9c\x19E\x98{\xd3\xce\xcfR\x9fAr\xff\xf14=\xf8\x16+\x8fzs\xb4\xc6<\xe6\xfe\xa4~4Am\xbf[\xed\x11\x02\x91\xac\x01\x01t\x06]\xdc\x8f,F\x025\xb6\x04\x88<\xd0B\x9c/Bb\x1c\xe4\xd0~_\x83b\x9e \xb5\x90/\xaf\xde\xab\n\x82\xadnMr\xf9\x94H\xf9\x8a\xd8\xb8\xcd)\x90\x13\x16\xa0\xf8\xae\xb2\xca\xc3\xc7&g5\xb9E|\x14\xae\xf6\xd1\x99KP\x93z\xc2D\x12\xbd\x85\xc2\xe7\xd0f\xc2\xbc]\x86\xb0\xc7\x85`8\x8d\x8e\xfc(Z\xdf\xec\x19V6Jg\xd2\x8b\xff\x89\xd5\x80\x18[>\xd2Y\xbc\xc2a\x07\xf9\x0f\x9a\xa9\xc7_\x10*}s\x1dZ\xa4\xa1\xd6\xdb\x10\x8e\xad<\xbe\xc9x\x8dYo\x95q\x02/\xebd\xb0m@$\xa44\x1e"\xb3\xb2W~\xdf\x9a\x93\x8fx-\xf1\x8d\xe0\x06\xb9]\xff\xa8\xdc\xb2IN5|9\xfaB\xb8\x87,\x89M\xc7jg\xd3\x13\xb4\xc3\t\xd4\xf1[\xbb\xaa\xbe\xc9\xc9\xf0\x9d\x85\xb8<[\xae$xP\xd2Tz\xb7\xbd\x9es`\xad\x1axKV\xe3\x11\x12\x0f\xee\x9cz-\\)\x18\x98\xfe\xc961\xaf6r!\x00f\xf3\x8cz\xc7\xe8\xea\x14\x86\x11N\xb1\xe9\xf9\xd5\xa29\xd4\x87pe\xf4"\xce\x10J\x10\x8b\xa9\xbf\xae\x00\xea\xaea\x03\xe93ht\xad\x8f\x90\xf9\x84\xa0\xaf\x14\x88]\xcf "\x80\x91\x00\xf9\xb2\x86\xd1\xfb\xae(\xb4\xe3Dl\xe0P\xb3,j\x90\xf1\x99\xd3\xca\x0fo\xf1\'\x99\x99J\x06\x18\xd6\xc1\xa0\x1dN\x0e\x05\t5\xa5J\xd1\x97R*\xed\x1f\x0c\x8f\xac$\x07s\xa3\xe0\xec\xc4\xdd}\xca\xa5J\xb4.\xe7\x8b\xe2\x1b)\x8e}\xc1\xd7\x12`\x1b%\x8e}\xe1\xdfy+\xe7\xd43\r\x90f\x95\xb7\xd1.\x11x\xcb\xf9A\xe2c~\xfc\xd6~\x04\x86\xd5\xec{6tRy\xac\xd9U\xe0\x1e\xd5nx/\x06Pu\x99\x9f\x04\xb3+\x04\x9an\x17\x13\xad\xea\x00\x03\x92\xb78d\xe7\xe9"$\x9a\xea\x12\xe3S\x0c:\x8f\xa8\x8eB{\xa8\xe0}\xe9;\xb6\xe7\x15\xaen\xc9\xf1\x15R\x01\x02b_[ B\xfcQ\xbe\xd8f!\x8e\x91ix\xbcEA\x9c\xe4s\xa6X?\xa3H\xa5h\xa7\xbf\x1d\xafq\xb8\xf7\xbd\x939kQD\xdb@\xa1\xc3\xb0\xd9\xb9\x13+u\t\x85 \xc26\xde0\x11\x1d\xb6^[\x95O\xab\x86\x13\xc3\xa7\xbd\x03\x8e\x18\x98\x9b\xea\xe5\xf3ZZ\\\xc4m\x89s\x1fDiv\xac\x04\x92\x98\xa7\x9f\xba\x08+\xa6\x87\x94\xc8\xb7fJ\xfd\xe3\x1bz\xf7\x14\x95\xcbA\xfd\x8c\x89\xe3\xadi\xefv\xee\xb3d\xdc\xfb\x7fIb\xd8\xbd\x14B10U\x86\xbc/p\xb6\xc7\x82 j\xb8\x1a\xa8\xe6\xfbi\xb8\x9f\x93\xb9U\xb5\xe2\xb9\r\x86\x87\x1e\x03\x00\xd6\xc3\x06.\xd4\x01q\xbb\xf3\x7f/\x15ZY\x8d\x9bi\xf9\xb7%\xa8*\xf9\xf5\x1aF\x10\xc17C\x83\xd5\xbc\rHp\xd3\xdb\xe3L\xfbUB\xab~\xe9\x1d\xafI\xde\xbe6\x0b\xc2\x05\x10ZT\x95\x88@\x9c\x82\xc1\xfa\xae\x10\xb3{VU\xe9x\xe0\xb9\xe9\xcdPoPm<\xf5\xf0\xfc\xe6\xc3\xed>\xbdW\'\x12.\xc9\x15v\xfd\xf9,hZ\xfb\x04'
# b_data = b''
#
# for i in range(28, 40):
#     decrypt_data = xor(b_data[i:], key)
#     packet_id = get_packet_id(decrypt_data)
#     print(packet_id)


# b_data = b''
# b_data = remove_magic1(b_data)
# data = pp.parse(b_data, "PlayerLoginReq")
